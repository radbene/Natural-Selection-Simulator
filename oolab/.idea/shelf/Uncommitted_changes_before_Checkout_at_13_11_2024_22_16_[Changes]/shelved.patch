Index: src/test/java/agh/ics/oop/SimulationTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package agh.ics.oop;\r\n\r\nimport agh.ics.oop.model.*;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.TestTemplate;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nclass SimulationTest {\r\n\r\n\r\n    @Test\r\n    void SameStartingPosition() {\r\n        List<Vector2d> starting_positions = Arrays.asList(new Vector2d[]{new Vector2d(0,0), new Vector2d(0,0), new Vector2d(0,0), new Vector2d(0,0)});\r\n        List<MoveDirection> moves = OptionsParser.parse(new String[]{\"b\",\"r\",\"l\",\"f\",\"b\",\"f\",\"f\",\"f\"});\r\n        WorldMap map = new RectangularMap(6,6);\r\n        Simulation simulation = new Simulation(starting_positions, moves, map);\r\n        simulation.run();\r\n        List<Animal> animals = simulation.getAnimals();\r\n        assertEquals(1, animals.size());\r\n        assertTrue(animals.get(0).isAt(new Vector2d(0,3)));\r\n        assertEquals(animals.get(0).getDirection(),MapDirection.NORTH);\r\n\r\n    }\r\n\r\n    @Test\r\n    void GoingOutOfBoundsTest() {\r\n        List<Vector2d> starting_positions = Arrays.asList(new Vector2d[]{new Vector2d(0,0), new Vector2d(5,0), new Vector2d(0,5), new Vector2d(5,5)});\r\n        List<MoveDirection> moves = OptionsParser.parse(new String[]{\"b\",\"r\",\"l\",\"f\",\"b\",\"f\",\"f\",\"f\"});\r\n        WorldMap map = new RectangularMap(6,6);\r\n        Simulation simulation = new Simulation(starting_positions, moves, map);\r\n        simulation.run();\r\n        List<Animal> animals = simulation.getAnimals();\r\n        assertFalse(animals.isEmpty());\r\n        assertEquals(animals.size(), 4);\r\n        assertTrue(animals.get(0).isAt(new Vector2d(0,0)));\r\n        assertTrue(animals.get(1).isAt(new Vector2d(5,0)));\r\n        assertTrue(animals.get(2).isAt(new Vector2d(0,5)));\r\n        assertTrue(animals.get(3).isAt(new Vector2d(5,5)));\r\n\r\n        assertEquals(animals.get(0).getDirection(), MapDirection.NORTH);\r\n        assertEquals(animals.get(1).getDirection(), MapDirection.EAST);\r\n        assertEquals(animals.get(2).getDirection(), MapDirection.WEST);\r\n        assertEquals(animals.get(3).getDirection(), MapDirection.NORTH);\r\n    }\r\n\r\n    @Test\r\n    void StartingPositionsOutOfBoundsTest() {\r\n        List<Vector2d> starting_positions = Arrays.asList(new Vector2d[]{new Vector2d(3,4), new Vector2d(5,0), new Vector2d(0,5), new Vector2d(5,5)});\r\n        List<MoveDirection> moves = OptionsParser.parse(new String[]{\"b\",\"r\",\"f\",\"f\",\"b\",\"f\",\"f\",\"f\"});\r\n        WorldMap map = new RectangularMap(2,2);\r\n        Simulation simulation = new Simulation(starting_positions, moves, map);\r\n        simulation.run();\r\n        List<Animal> animals = simulation.getAnimals();\r\n        assertTrue(animals.isEmpty());\r\n    }\r\n    @Test\r\n    void EmptyStartingPositionsTest() {\r\n        List<Vector2d> starting_positions = new ArrayList<>();\r\n        List<MoveDirection> moves = new ArrayList<>();\r\n        moves.add(MoveDirection.FORWARD);\r\n        moves.add(MoveDirection.RIGHT);\r\n        moves.add(MoveDirection.FORWARD);\r\n        WorldMap map = new RectangularMap(5,5);\r\n        Simulation simulation = new Simulation(starting_positions, moves, map);\r\n        simulation.run();\r\n        List<Animal> animals = simulation.getAnimals();\r\n        assertTrue(animals.isEmpty());\r\n    }\r\n    @Test\r\n    void EmptyMovesTest() {\r\n        List<Vector2d> starting_positions = new ArrayList<>();\r\n        List<MoveDirection> moves = new ArrayList<>();\r\n        starting_positions.add(new Vector2d(2, 2));\r\n        starting_positions.add(new Vector2d(0, 0));\r\n        WorldMap map = new RectangularMap(5,5);\r\n        Simulation simulation = new Simulation(starting_positions, moves, map);\r\n        simulation.run();\r\n        List<Animal> animals = simulation.getAnimals();\r\n        assertTrue(animals.get(0).isAt(new Vector2d(2, 2)));\r\n        assertTrue(animals.get(1).isAt(new Vector2d(0, 0)));\r\n        assertEquals(animals.get(0).getDirection(), MapDirection.NORTH);\r\n        assertEquals(animals.get(1).getDirection(), MapDirection.NORTH);\r\n    }\r\n\r\n    @Test\r\n    void RotatingRightTest() {\r\n        List<Vector2d> starting_positions = new ArrayList<>();\r\n        List<MoveDirection> moves = new ArrayList<>();\r\n        starting_positions.add(new Vector2d(2, 2));\r\n        moves.add(MoveDirection.RIGHT);\r\n        WorldMap map = new RectangularMap(5,5);\r\n        Simulation simulation = new Simulation(starting_positions, moves, map);\r\n        simulation.run();\r\n        List<Animal> animals = simulation.getAnimals();\r\n        assertEquals(animals.get(0).getDirection(), MapDirection.EAST);\r\n        simulation.run();\r\n        animals = simulation.getAnimals();\r\n        assertEquals(animals.get(0).getDirection(), MapDirection.SOUTH);\r\n        simulation.run();\r\n        animals = simulation.getAnimals();\r\n        assertEquals(animals.get(0).getDirection(), MapDirection.WEST);\r\n        simulation.run();\r\n        animals = simulation.getAnimals();\r\n        assertEquals(animals.get(0).getDirection(), MapDirection.NORTH);\r\n    }\r\n\r\n    @Test\r\n    void RotatingLeftTest() {\r\n        List<Vector2d> starting_positions = new ArrayList<>();\r\n        List<MoveDirection> moves = new ArrayList<>();\r\n        starting_positions.add(new Vector2d(2, 2));\r\n        moves.add(MoveDirection.LEFT);\r\n        WorldMap map = new RectangularMap(5,5);\r\n        Simulation simulation = new Simulation(starting_positions, moves, map);\r\n        simulation.run();\r\n        List<Animal> animals = simulation.getAnimals();\r\n        assertEquals(animals.get(0).getDirection(), MapDirection.WEST);\r\n        simulation.run();\r\n        animals = simulation.getAnimals();\r\n        assertEquals(animals.get(0).getDirection(), MapDirection.SOUTH);\r\n        simulation.run();\r\n        animals = simulation.getAnimals();\r\n        assertEquals(animals.get(0).getDirection(), MapDirection.EAST);\r\n        simulation.run();\r\n        animals = simulation.getAnimals();\r\n        assertEquals(animals.get(0).getDirection(), MapDirection.NORTH);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/agh/ics/oop/SimulationTest.java b/src/test/java/agh/ics/oop/SimulationTest.java
--- a/src/test/java/agh/ics/oop/SimulationTest.java	(revision dd06c0a6fac851e76a5d6863970fe40a64604195)
+++ b/src/test/java/agh/ics/oop/SimulationTest.java	(date 1731532601171)
@@ -130,4 +130,5 @@
         animals = simulation.getAnimals();
         assertEquals(animals.get(0).getDirection(), MapDirection.NORTH);
     }
+    
 }
\ No newline at end of file
